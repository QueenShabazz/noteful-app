{"ast":null,"code":"var _jsxFileName = \"/Users/queen/Desktop/notefulcli/src/App/App.js\";\nimport React, { Component } from \"react\";\nimport { Route, Link } from \"react-router-dom\";\nimport Note from \"../Note/Note\";\nimport PageMain from \"../PageMain/PageMain\";\nimport NoteList from \"../NoteList/NoteList\";\nimport NoteNav from \"../NoteNav/NoteNav\";\nimport AddFolder from \"../AddFolder/AddFolder\";\nimport AddNote from \"../AddNote/AddNote\";\nimport \"./App.css\";\nimport ApiContext from \"../ApiContext\";\nimport config from \"../config\";\nimport AddFolderError from \"../AddFolderError/AddFolderError\";\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.validate = () => {\n      let nameError;\n      let folderError;\n\n      if (this.state.name === \"\") {\n        nameError = React.createElement(\"p\", {\n          style: {\n            color: 'red'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 63\n          },\n          __self: this\n        }, \" Name required\");\n        this.setState({\n          nameError\n        });\n        return false;\n      }\n\n      if (this.state.folderid === \"...\" || this.state.folderid === \"\") {\n        folderError = React.createElement(\"p\", {\n          style: {\n            color: 'red'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 68\n          },\n          __self: this\n        }, \" Folder required\");\n        this.setState({\n          folderError\n        });\n        return false;\n      }\n\n      this.setState({\n        folderError: \"\"\n      });\n      return true;\n    };\n\n    this.folderSubmit = e => {\n      e.preventDefault();\n\n      if (this.state.folder) {\n        const folder = {\n          name: this.state.folder\n        };\n        fetch(`${config.API_ENDPOINT}/api/folders`, {\n          method: \"POST\",\n          body: JSON.stringify(folder),\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        }).then(res => {\n          if (!res.ok) {\n            throw new Error(\"Something is wrong, try again\");\n          }\n\n          return res.json();\n        }).then(data => {\n          if (data.name !== \"\") {\n            this.setState({\n              nameError: \"\",\n              folderError: \"\"\n            });\n          }\n\n          let newFolder = this.state.folders;\n          newFolder.push(data);\n          this.setState({\n            folders: newFolder\n          });\n        }).catch(error => console.log(error));\n      }\n\n      this.setState({\n        folder: \"\"\n      });\n    };\n\n    this.handleSubmit = async e => {\n      e.preventDefault();\n      const isValid = this.validate();\n\n      if (!isValid) {\n        console.log(\"error\");\n        alert(\"check connection\");\n      } else if (this.state.folder !== \"\" || this.state.folder !== \"...\") {\n        const {\n          name,\n          content,\n          folderid\n        } = this.state;\n        const newNote = {\n          name,\n          content,\n          folderid\n        };\n\n        if (this.state.content === \"\") {\n          alert(\"Note must include content\");\n        } else {\n          fetch(`${config.API_ENDPOINT}/api/notes`, {\n            method: \"POST\",\n            body: JSON.stringify(newNote),\n            headers: {\n              \"Content-Type\": \"application/json\"\n            }\n          }).then(res => {\n            if (!res.ok) {\n              console.log('RES', res);\n              throw new Error(`Your note was not added, try again ${res.json()}`);\n            }\n\n            return res.json();\n          }).then(data => {\n            let tempNotes = this.state.notes;\n            tempNotes.push(newNote);\n            this.setState({\n              id: data.id,\n              name: data.name,\n              content: data.content,\n              folderid: data.folderid,\n              notes: tempNotes\n            });\n          }).catch(error => console.log(error));\n        }\n      }\n    };\n\n    this.handleClickDelete = id => {\n      fetch(`${config.API_ENDPOINT}/api/notes/${id}`, {\n        method: 'DELETE',\n        headers: {\n          'content-type': 'application/json'\n        }\n      }).then(res => {\n        if (!res.ok) return res.json();\n      }).then(() => {\n        alert(`note ${id} deleted!`);\n        this.setState({\n          notes: this.state.notes.filter(i => i.id !== id)\n        });\n      }).catch(error => {\n        console.error({\n          error\n        });\n      });\n    };\n\n    this.state = {\n      notes: [],\n      folders: [],\n      id: this.notes,\n      name: \"\",\n      content: \"\",\n      folderid: \"\",\n      nameError: \"\",\n      folderError: \"\"\n    };\n    this.onNameChange = this.onNameChange.bind(this);\n    this.onContentChange = this.onContentChange.bind(this);\n    this.onfolderChange = this.onfolderChange.bind(this);\n    this.newFolder = this.newFolder.bind(this);\n    this.validate = this.validate.bind(this);\n  } //FOLDER + NOTE CREATION\n\n\n  newFolder(e) {\n    e.preventDefault();\n    this.setState({\n      folder: e.target.value\n    });\n  }\n\n  onNameChange(e) {\n    e.preventDefault();\n    this.setState({\n      name: e.target.value\n    });\n  }\n\n  onContentChange(e) {\n    e.preventDefault();\n    this.setState({\n      content: e.target.value\n    });\n  }\n\n  onfolderChange(e) {\n    e.preventDefault();\n    this.setState({\n      folderid: e.target.value\n    });\n  } //VALIDATE IF USER DATA PASSES REQUIREMENTS\n\n\n  //FETCH NOTES + FOLDERS FOR MAIN DISPLAY\n  componentDidMount() {\n    let fetchData = () => {\n      const endpts = [`${config.API_ENDPOINT}/api/notes`, `${config.API_ENDPOINT}/api/folders`]; //map each endpoint to the promise of the fetch\n\n      let requests = endpts.map(endpt => fetch(endpt).then(response => response.json())); //promise.all will wait until all jobs are executed\n\n      return Promise.all(requests);\n    };\n\n    fetchData().then(res => {\n      this.setState({\n        notes: res[0],\n        folders: res[1]\n      });\n    });\n  }\n\n  renderFolder() {\n    const {\n      notes\n    } = this.state;\n    return React.createElement(React.Fragment, null, React.createElement(Route, {\n      exact: true,\n      key: \"/\",\n      path: \"/\",\n      render: props => React.createElement(NoteList, Object.assign({}, props, {\n        folders: this.state.folders,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/notes/:noteId\",\n      component: NoteNav,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/notes/:noteId\",\n      render: props => React.createElement(PageMain, Object.assign({}, props, {\n        notes: this.state.notes,\n        onDeleteNote: this.handleClickDelete,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      key: \"/folder/:folderid\",\n      path: \"/folder/:folderid\",\n      render: props => React.createElement(NoteList, Object.assign({}, props, {\n        folders: this.state.folders,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/add-folder\",\n      component: NoteNav,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/add-note\",\n      render: props => React.createElement(NoteNav, Object.assign({}, props, {\n        notes: notes,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }));\n  }\n\n  renderFolderRoutes() {\n    return React.createElement(React.Fragment, null, React.createElement(Route, {\n      key: \"/folder/:folderid\",\n      exact: true,\n      path: \"/folder/:folderid\",\n      render: props => React.createElement(Note, Object.assign({}, props, {\n        handleClickDelete: this.handleClickDelete,\n        notes: this.state.notes,\n        id: this.state.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    }), React.createElement(Route, {\n      key: \"/\",\n      exact: true,\n      path: \"/\",\n      render: props => React.createElement(Note, Object.assign({}, props, {\n        handleClickDelete: this.handleClickDelete,\n        id: this.state.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/add-folder\",\n      render: props => React.createElement(AddFolderError, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241\n        },\n        __self: this\n      }, React.createElement(AddFolder, Object.assign({}, props, {\n        folderSubmit: this.folderSubmit,\n        newFolder: this.newFolder,\n        folder: this.state.folder,\n        nameError: this.state.nameError,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242\n        },\n        __self: this\n      }))),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/add-note\",\n      render: props => React.createElement(AddNote, Object.assign({}, props, {\n        id: this.state.id,\n        handleSubmit: this.handleSubmit,\n        onContentChange: this.onContentChange,\n        name: this.state.name,\n        onNameChange: this.onNameChange,\n        content: this.state.content,\n        folder: this.state.folderid,\n        onfolderChange: this.onfolderChange,\n        nameError: this.state.nameError,\n        folderError: this.state.folderError,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 255\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }));\n  } //second render\n\n\n  render() {\n    console.log('fromappnotes', this.state.id); // final main render to bring it all together now\n\n    const value = {\n      notes: this.state.notes,\n      folders: this.state.folders,\n      deleteNote: this.handleDeleteNote\n    };\n    return React.createElement(ApiContext.Provider, {\n      value: value,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"body\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286\n      },\n      __self: this\n    }, React.createElement(\"header\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288\n      },\n      __self: this\n    }, React.createElement(Link, {\n      to: \"/\",\n      className: \"link\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289\n      },\n      __self: this\n    }, \" \", \"Noteful\"))), React.createElement(\"div\", {\n      className: \"main\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296\n      },\n      __self: this\n    }, this.renderFolder(), this.renderFolderRoutes())));\n  }\n\n}","map":{"version":3,"sources":["/Users/queen/Desktop/notefulcli/src/App/App.js"],"names":["React","Component","Route","Link","Note","PageMain","NoteList","NoteNav","AddFolder","AddNote","ApiContext","config","AddFolderError","App","constructor","props","validate","nameError","folderError","state","name","color","setState","folderid","folderSubmit","e","preventDefault","folder","fetch","API_ENDPOINT","method","body","JSON","stringify","headers","then","res","ok","Error","json","data","newFolder","folders","push","catch","error","console","log","handleSubmit","isValid","alert","content","newNote","tempNotes","notes","id","handleClickDelete","filter","i","onNameChange","bind","onContentChange","onfolderChange","target","value","componentDidMount","fetchData","endpts","requests","map","endpt","response","Promise","all","renderFolder","renderFolderRoutes","render","deleteNote","handleDeleteNote"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Route, Link } from \"react-router-dom\";\nimport Note from \"../Note/Note\";\nimport PageMain from \"../PageMain/PageMain\";\nimport NoteList from \"../NoteList/NoteList\";\nimport NoteNav from \"../NoteNav/NoteNav\";\nimport AddFolder from \"../AddFolder/AddFolder\";\nimport AddNote from \"../AddNote/AddNote\";\nimport \"./App.css\";\nimport ApiContext from \"../ApiContext\";\nimport config from \"../config\";\nimport AddFolderError from \"../AddFolderError/AddFolderError\";\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      notes: [],\n      folders: [],\n      id:this.notes,\n      name: \"\",\n      content: \"\",\n      folderid: \"\",\n      nameError: \"\",\n      folderError: \"\"\n    };\n    this.onNameChange = this.onNameChange.bind(this);\n    this.onContentChange = this.onContentChange.bind(this);\n    this.onfolderChange = this.onfolderChange.bind(this);\n    this.newFolder = this.newFolder.bind(this);\n    this.validate = this.validate.bind(this);\n  }\n  //FOLDER + NOTE CREATION\n  newFolder(e) {\n    e.preventDefault();\n    this.setState({\n      folder: e.target.value\n    });\n  }\n  onNameChange(e) {\n    e.preventDefault();\n    this.setState({\n      name: e.target.value\n    });\n  }\n  onContentChange(e) {\n    e.preventDefault();\n    this.setState({\n      content: e.target.value\n    });\n  }\n  onfolderChange(e) {\n    e.preventDefault();\n    this.setState({\n      folderid: e.target.value\n    });\n  }\n//VALIDATE IF USER DATA PASSES REQUIREMENTS\nvalidate = () => {\n  let nameError \n  let folderError\n  if(this.state.name===\"\"){\n    nameError = <p style={{color:'red'}}> Name required</p>\n    this.setState({nameError});\n    return false\n  } \n  if(this.state.folderid===\"...\" || this.state.folderid===\"\"){\n    folderError = <p style={{color:'red'}}> Folder required</p>\n    this.setState({folderError});\n    return false;\n  } \n  this.setState({ folderError: \"\" });\n  return true;\n};\n\n  //FETCH NOTES + FOLDERS FOR MAIN DISPLAY\n  componentDidMount() {\n    let fetchData = () => {\n      const endpts = [\n        `${config.API_ENDPOINT}/api/notes`,\n        `${config.API_ENDPOINT}/api/folders`\n      ];\n      //map each endpoint to the promise of the fetch\n      let requests = endpts.map(endpt =>\n        fetch(endpt).then(response => response.json())\n      );\n      //promise.all will wait until all jobs are executed\n      return Promise.all(requests);\n    };\n    fetchData().then(res => {\n      this.setState({\n        notes: res[0],\n        folders: res[1]\n      });\n    });\n  }\n\n\n  folderSubmit = e => {\n    e.preventDefault();\n    if (this.state.folder) {\n      const folder = { name: this.state.folder };\n      fetch(`${config.API_ENDPOINT}/api/folders`, {\n        method: \"POST\",\n        body: JSON.stringify(folder),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      })\n        .then(res => {\n          if (!res.ok) {\n            throw new Error(\"Something is wrong, try again\");\n          }\n          return res.json();\n        })\n        .then(data => {\n          if (data.name !== \"\") {\n            this.setState({ nameError: \"\", folderError:\"\"});\n          }\n          let newFolder = this.state.folders;\n          newFolder.push(data);\n          this.setState({ folders: newFolder });\n        })\n\n        .catch(error => console.log(error));\n    }\n    this.setState({ folder: \"\" });\n  };\n\n  handleSubmit = async e => {\n    e.preventDefault();\n    const isValid = this.validate();\n    if (!isValid) {\n      console.log(\"error\")\n      alert(\"check connection\")\n    } else if (this.state.folder !== \"\" || this.state.folder!== \"...\") {\n      const { name, content, folderid } = this.state;\n      const newNote = { name, content, folderid };\n      if (this.state.content === \"\") {\n        alert(\"Note must include content\");\n      } else {\n        fetch(`${config.API_ENDPOINT}/api/notes`, {\n          method: \"POST\",\n          body: JSON.stringify(newNote),\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        })\n          .then(res => {\n            if (!res.ok) {\n              console.log('RES', res)\n              throw new Error(`Your note was not added, try again ${res.json()}`);\n            }\n            return res.json();\n          })\n          .then(data => {\n            let tempNotes = this.state.notes;\n            tempNotes.push(newNote);\n\n            this.setState({\n              id: data.id,\n              name: data.name,\n              content: data.content,\n              folderid: data.folderid,\n              notes: tempNotes\n            });\n          })\n          .catch(error => console.log(error));\n      }\n    }\n  };\n\n  handleClickDelete = (id) => {\n    fetch(`${config.API_ENDPOINT}/api/notes/${id}`,{\n      method: 'DELETE',\n      headers:{\n        'content-type': 'application/json'\n      },\n    })\n      .then(res => {\n        if(!res.ok)\n        return res.json()\n      })\n      .then(()=> {\n           alert(`note ${id} deleted!`)\n           this.setState({notes: this.state.notes.filter(i => i.id !== id)})\n      })\n      .catch(error => {\n        console.error({error})\n      })\n  };\n\n\n  renderFolder() {\n    const { notes } = this.state;\n    return (\n      <>\n        <Route exact key=\"/\" path=\"/\" render={props=> <NoteList {...props} folders={this.state.folders}/>} />\n        <Route path=\"/notes/:noteId\" component={NoteNav} />\n        <Route path=\"/notes/:noteId\" render={props=>\n        <PageMain {...props}\n          notes={this.state.notes}\n          onDeleteNote={this.handleClickDelete}\n        />} />\n        <Route\n          exact\n          key=\"/folder/:folderid\"\n          path=\"/folder/:folderid\"\n          render={props=> <NoteList {...props} folders={this.state.folders}/>}\n        />\n        <Route path=\"/add-folder\" component={NoteNav} />\n        <Route\n          path=\"/add-note\"\n          render={props => <NoteNav {...props} notes={notes} />}\n        />\n      </>\n    );\n  }\n  renderFolderRoutes() {\n    return (\n      <>\n        <Route\n          key=\"/folder/:folderid\"\n          exact path=\"/folder/:folderid\"\n          render={props=>\n            <Note {...props}\n              handleClickDelete={this.handleClickDelete}\n              notes={this.state.notes}\n              id={this.state.id}\n            />} \n        />\n        <Route key=\"/\" exact path=\"/\" render={props=>\n          <Note {...props}\n            handleClickDelete={this.handleClickDelete}\n            id={this.state.id}\n          />} \n        />\n        <Route\n          path=\"/add-folder\"\n          render={props => (\n            <AddFolderError>\n              <AddFolder\n                {...props}\n                folderSubmit={this.folderSubmit}\n                newFolder={this.newFolder}\n                folder={this.state.folder}\n                nameError={this.state.nameError}\n              />\n            </AddFolderError>\n          )}\n        />\n        <Route\n          path=\"/add-note\"\n          render={props => (\n            <AddNote\n              {...props}\n              id={this.state.id}\n              handleSubmit={this.handleSubmit}\n              onContentChange={this.onContentChange}\n              name={this.state.name}\n              onNameChange={this.onNameChange}\n              content={this.state.content}\n              folder={this.state.folderid}\n              onfolderChange={this.onfolderChange}\n              nameError={this.state.nameError}\n              folderError={this.state.folderError}\n            />\n          )}\n        />\n      </>\n    );\n  }\n  //second render\n\n  render() {\n    console.log('fromappnotes', this.state.id)\n\n    // final main render to bring it all together now\n    const value = {\n      notes: this.state.notes,\n      folders: this.state.folders,\n      deleteNote: this.handleDeleteNote\n    };\n    return (\n      <ApiContext.Provider value={value}>\n        <div className=\"body\">\n          <header>\n            <h1>\n              <Link to=\"/\" className=\"link\">\n                {\" \"}\n                Noteful\n              </Link>\n            </h1>\n          </header>\n          {/* folder Routes - folders */}\n          <div className=\"main\">\n            {/* LEFT NAVIGATION : FOLDERS */}\n            {this.renderFolder()}\n            {/* RIGHT NOTES & FOLDERS NAVIGATION */}\n            {this.renderFolderRoutes()}\n          </div>\n          {/* Render Notes */}\n        </div>\n      </ApiContext.Provider>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}